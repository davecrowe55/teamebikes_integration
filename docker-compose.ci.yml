openapi: "3.0.2"
info:
  title: ebikes test !
  version: "1.0"
servers:
  - url: "/api"
paths:
  /example:
    get:
      summary: proves your set up works end to end!
      description: 
          |   
          running this test will hit routers/exampleRouter, which will in turn hit the db.

          If you can execute this, it's running on your machine just fine.

          There is also a test for this.
      
      responses:
          "200":
            description: OK
            content:
              application/json:
                schema: 
                  type: 
                    object
  /customers:
    get:
      description: returns all customers!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
      tags:
        - customers
  /customers/{customerId}:
    get:
      description: returns a single customer
      parameters:
        - name: customerId
          schema:
            type: integer
          in: path
          description: id of customer to retrieve.
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: The customer id is not a positive integer
        "404":
          description: No customer exists with that Id.
      tags:
        - customers
    put:
      description: edits an existing customer
      parameters:
        - name: customerId
          schema:
            type: integer
          in: path
          description: id of customer to retrieve.
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: OK
        "400":
          description: The customer id is not a positive integer
        "404":
          description: No customer exists with that Id.
      tags:
        - customers
  /customers/{customerId}/orders:
    get:
      description: returns orders for a single customer
      parameters:
        - name: customerId
          schema:
            type: integer
          in: path
          description: id of customer to retrieve.
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: The customer id is not a positive integer
        "404":
          description: No customer exists with that Id.
      tags:
        - orders

  /orders:
    get:
      description: Returns a list of orders ordered by most recent
      parameters:
        - name: limit
          in: query
          required: false
          description: optionally limit the amount of orders returned.
          schema:
            type: integer
      responses:
        "200":
          description: Bon Appetit!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
      tags:
        - orders
    # too brutal this time around
    # post:
    #   description: Adds an order
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/OrderRequest"
    #   responses:
    #     "201":
    #       description: contains the id of the new order.
    #       content:
    #         application/json:
    #           schema:
    #             type: integer
    #   tags:
    #     - orders
  /stats/high-rollerz:
    get:
      summary: returns top 10 biggest spenders.
      description: |
        Returns the names and ids of the top 10 users, and their total all time spend.

        Ordered by the highest roller

      responses:
        "200":
          description: the highest rollerz of all time
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HighRoller"
      tags:
        - stats
  /stats/promotions:
    get:
      summary: returns total income for promoted and non promoted meals.
      description: |
        returns total income for promoted and non promoted meals.

      responses:
        "200":
          description: here's your stats!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionStats"
      tags:
        - stats
  /stats/popular-meals:
    get:
      summary: returns the meals that have sold the most.
      description: |
        returns the meals that have sold the most.

        Ordered by most to least popular
      responses:
        "200":
          description: keep these puppies on the menu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meal"
      tags:
        - stats
components:
  schemas:
    Customer:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
      required:
        - firstName
        - lastName
        - email
    CustomerWithId:
      allOf:
        - $ref: "#/components/schemas/Customer"
      properties:
        id:
          type: integer
      required:
        - id
    OrderRequest:
      type: object
      properties:
        customerId:
          type: integer
        meals:
          type: array
          items:
            $ref: "#/components/schemas/Meal"
    Order:
      type: object
      properties:
        datetime:
          type: string
        id:
          type: integer
        customerId:
          type: integer
        # meals:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/MealRequest"
        # totalPrice:
        #   type: number
        isDelivery:
          type: boolean
    Meal:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        name:
          type: string
    MealRequest:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
    HighRoller:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        totalSpend:
          type: number
      required:
        - id
        - firstName
        - lastName
        - email
        - totalSpend
    PromotionStats:
      type: object
      properties:
        promotedMealsTotalIncome:
          type: number
        nonPromotedMealsTotalIncome:
          type: number
